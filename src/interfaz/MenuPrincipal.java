/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import cjb.ci.CtrlInterfaz;
import dao.ClienteDao;
import dao.ProductoDao;
import dao.VendedorDao;
import java.util.ArrayList;
import modelo.Producto;
import modelo.Cliente;
import modelo.Vendedor;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chemo
 */
public class MenuPrincipal extends javax.swing.JFrame
{

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal()
    {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaVendedor = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        checkTelefonoVendedor = new javax.swing.JCheckBox();
        checkEstadoVendedor = new javax.swing.JCheckBox();
        checkDniVendedor = new javax.swing.JCheckBox();
        checkIdVendedor = new javax.swing.JCheckBox();
        checkNombreVendedor = new javax.swing.JCheckBox();
        aceptarProdcutos = new javax.swing.JButton();
        limpiarProductos = new javax.swing.JButton();
        ordenarPorPrecio = new javax.swing.JCheckBox();
        checkPrecioMaximo = new javax.swing.JCheckBox();
        checkMayor15 = new javax.swing.JCheckBox();
        checkClientesActivos = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tClientes = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        s = new javax.swing.JScrollPane();
        activos = new javax.swing.JTextArea();
        aceptarClientes = new javax.swing.JButton();
        limpiarClientes = new javax.swing.JButton();
        aceptarVendedor = new javax.swing.JButton();
        limpiarVendedor = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        inactivos = new javax.swing.JTextArea();
        checkClientesInactivos = new javax.swing.JCheckBox();
        checkIdClientes = new javax.swing.JCheckBox();
        checkDniClientes = new javax.swing.JCheckBox();
        checkNombreClientes = new javax.swing.JCheckBox();
        checkDireccionClientes = new javax.swing.JCheckBox();
        checkEstadoClientes = new javax.swing.JCheckBox();
        checkIdProducto = new javax.swing.JCheckBox();
        checkNombreProducto = new javax.swing.JCheckBox();
        checkPrecioProducto = new javax.swing.JCheckBox();
        checkStockProducto = new javax.swing.JCheckBox();
        checkEstadoProducto = new javax.swing.JCheckBox();
        checkVendedorActivo = new javax.swing.JCheckBox();
        checkVendedoresInactivos = new javax.swing.JCheckBox();
        checkPrecioMinimo = new javax.swing.JCheckBox();
        checkPromedioPrecios = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        promPrecios = new javax.swing.JTextArea();
        checkDesviacionEstandarProducto = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        desviacionEstandar = new javax.swing.JTextArea();
        checkToluca = new javax.swing.JCheckBox();
        checkStockMayor20 = new javax.swing.JCheckBox();
        checkMetepec = new javax.swing.JCheckBox();
        checkStock20a40 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        ventas = new javax.swing.JMenu();
        generarVenta = new javax.swing.JMenuItem();
        mantenimiento = new javax.swing.JMenu();
        cliente = new javax.swing.JMenuItem();
        producto = new javax.swing.JMenuItem();
        vendedor = new javax.swing.JMenuItem();
        reportes = new javax.swing.JMenu();
        reportesVenta = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID", "DNI", "NOMBRE", "DIRECCION", "ESTADO"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaCliente.setEnabled(false);
        jScrollPane1.setViewportView(tablaCliente);

        panel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 490, 380));

        tablaVendedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID", "DNI", "NOMBRE", "TELEFONO", "ESTADO"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaVendedor.setEnabled(false);
        jScrollPane2.setViewportView(tablaVendedor);

        panel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 510, 380));

        tablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID", "NOMBRE", "PRECIO", "STOCK", "ESTADO"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaProducto.setEnabled(false);
        jScrollPane3.setViewportView(tablaProducto);

        panel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 190, 490, 380));

        jLabel1.setText("TABLA PRODUCTOS:");
        panel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 170, -1, -1));

        jLabel2.setText("TABLA VENDEDOR:");
        panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, -1, -1));

        jLabel3.setText("TABLA CLIENTES:");
        panel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, -1, -1));

        jLabel4.setText("FILTROS:");
        panel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        checkTelefonoVendedor.setText("TELEFONO");
        checkTelefonoVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkTelefonoVendedorActionPerformed(evt);
            }
        });
        panel.add(checkTelefonoVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, -1, -1));

        checkEstadoVendedor.setText("ESTADO");
        checkEstadoVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkEstadoVendedorActionPerformed(evt);
            }
        });
        panel.add(checkEstadoVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, -1, -1));

        checkDniVendedor.setText("DNI");
        checkDniVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkDniVendedorActionPerformed(evt);
            }
        });
        panel.add(checkDniVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        checkIdVendedor.setText("ID");
        checkIdVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkIdVendedorActionPerformed(evt);
            }
        });
        panel.add(checkIdVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        checkNombreVendedor.setText("NOMBRE");
        checkNombreVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkNombreVendedorActionPerformed(evt);
            }
        });
        panel.add(checkNombreVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, 20));

        aceptarProdcutos.setText("ACEPTAR");
        aceptarProdcutos.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aceptarProdcutosActionPerformed(evt);
            }
        });
        panel.add(aceptarProdcutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 160, -1, -1));

        limpiarProductos.setText("LIMPIAR");
        limpiarProductos.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                limpiarProductosActionPerformed(evt);
            }
        });
        panel.add(limpiarProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 160, 80, -1));

        ordenarPorPrecio.setText("ORDENAR");
        panel.add(ordenarPorPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 100, -1, -1));

        checkPrecioMaximo.setText("PRECIO MAXIMO");
        panel.add(checkPrecioMaximo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 100, -1, -1));

        checkMayor15.setText("PRECIO MAYOR A 15");
        panel.add(checkMayor15, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 100, -1, -1));

        checkClientesActivos.setText("ACTIVOS");
        panel.add(checkClientesActivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, -1, -1));

        jLabel5.setText("TOTAL DE CLIENTES:");
        panel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 100, -1, 20));

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tClientes.setEditable(false);
        tClientes.setColumns(20);
        tClientes.setRows(5);
        jScrollPane4.setViewportView(tClientes);

        panel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 100, 50, 20));

        jLabel6.setText("CLIENTES ACTIVOS:");
        panel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, -1, -1));

        s.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        s.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        activos.setEditable(false);
        activos.setColumns(20);
        activos.setRows(5);
        s.setViewportView(activos);

        panel.add(s, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 130, 50, 20));

        aceptarClientes.setText("ACEPTAR");
        aceptarClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aceptarClientesActionPerformed(evt);
            }
        });
        panel.add(aceptarClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, -1, -1));

        limpiarClientes.setText("LIMPIAR");
        limpiarClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                limpiarClientesActionPerformed(evt);
            }
        });
        panel.add(limpiarClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, -1, -1));

        aceptarVendedor.setText("ACEPTAR");
        aceptarVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aceptarVendedorActionPerformed(evt);
            }
        });
        panel.add(aceptarVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, -1, -1));

        limpiarVendedor.setText("LIMPIAR");
        limpiarVendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                limpiarVendedorActionPerformed(evt);
            }
        });
        panel.add(limpiarVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        jLabel7.setText("CLIENTES INACTIVOS:");
        panel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 130, -1, -1));

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        inactivos.setEditable(false);
        inactivos.setColumns(20);
        inactivos.setRows(5);
        jScrollPane5.setViewportView(inactivos);

        panel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 130, 50, 20));

        checkClientesInactivos.setText("INACTIVOS");
        panel.add(checkClientesInactivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, -1, -1));

        checkIdClientes.setText("ID");
        checkIdClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkIdClientesActionPerformed(evt);
            }
        });
        panel.add(checkIdClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, -1, -1));

        checkDniClientes.setText("DNI");
        checkDniClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkDniClientesActionPerformed(evt);
            }
        });
        panel.add(checkDniClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, -1, -1));

        checkNombreClientes.setText("NOMBRE");
        checkNombreClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkNombreClientesActionPerformed(evt);
            }
        });
        panel.add(checkNombreClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, -1, -1));

        checkDireccionClientes.setText("DIRECCION");
        checkDireccionClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkDireccionClientesActionPerformed(evt);
            }
        });
        panel.add(checkDireccionClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, -1, -1));

        checkEstadoClientes.setText("ESTADO");
        checkEstadoClientes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkEstadoClientesActionPerformed(evt);
            }
        });
        panel.add(checkEstadoClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 70, -1, -1));

        checkIdProducto.setText("ID");
        checkIdProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkIdProductoActionPerformed(evt);
            }
        });
        panel.add(checkIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 70, -1, -1));

        checkNombreProducto.setText("NOMBRE");
        checkNombreProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkNombreProductoActionPerformed(evt);
            }
        });
        panel.add(checkNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 70, -1, -1));

        checkPrecioProducto.setText("PRECIO");
        checkPrecioProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkPrecioProductoActionPerformed(evt);
            }
        });
        panel.add(checkPrecioProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 70, -1, -1));

        checkStockProducto.setText("STOCK");
        checkStockProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkStockProductoActionPerformed(evt);
            }
        });
        panel.add(checkStockProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 70, -1, -1));

        checkEstadoProducto.setText("ESTADO");
        checkEstadoProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkEstadoProductoActionPerformed(evt);
            }
        });
        panel.add(checkEstadoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 70, -1, -1));

        checkVendedorActivo.setText("ACTIVOS");
        checkVendedorActivo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkVendedorActivoActionPerformed(evt);
            }
        });
        panel.add(checkVendedorActivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        checkVendedoresInactivos.setText("INACTIVOS");
        panel.add(checkVendedoresInactivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        checkPrecioMinimo.setText("PRECIO MINIMO");
        panel.add(checkPrecioMinimo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 100, -1, -1));

        checkPromedioPrecios.setText("PROMEDIO PRECIOS");
        panel.add(checkPromedioPrecios, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 130, -1, -1));

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        promPrecios.setEditable(false);
        promPrecios.setColumns(20);
        promPrecios.setRows(5);
        jScrollPane6.setViewportView(promPrecios);

        panel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 130, 50, 20));

        checkDesviacionEstandarProducto.setText("DESVIACION ESTANDAR:");
        checkDesviacionEstandarProducto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkDesviacionEstandarProductoActionPerformed(evt);
            }
        });
        panel.add(checkDesviacionEstandarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 130, -1, -1));

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        desviacionEstandar.setEditable(false);
        desviacionEstandar.setColumns(20);
        desviacionEstandar.setRows(5);
        jScrollPane7.setViewportView(desviacionEstandar);

        panel.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1420, 130, 50, 20));

        checkToluca.setText("TOLUCA");
        panel.add(checkToluca, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 70, -1, -1));

        checkStockMayor20.setText("STOCK MAYOR A 20");
        panel.add(checkStockMayor20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 70, -1, -1));

        checkMetepec.setText("METEPEC");
        panel.add(checkMetepec, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, -1, -1));

        checkStock20a40.setText("STOCK 20 A 40");
        panel.add(checkStock20a40, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 160, -1, -1));

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -60, 1540, 580));

        menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/menu.png"))); // NOI18N
        menu.setText("Consultas");
        jMenuBar1.add(menu);

        ventas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/carrito-de-compras.png"))); // NOI18N
        ventas.setText("Ventas");

        generarVenta.setText("Generar Venta");
        generarVenta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                generarVentaActionPerformed(evt);
            }
        });
        ventas.add(generarVenta);

        jMenuBar1.add(ventas);

        mantenimiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mantenimiento.png"))); // NOI18N
        mantenimiento.setText("Mantenimiento");

        cliente.setText("Cliente");
        cliente.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                clienteMouseClicked(evt);
            }
        });
        cliente.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clienteActionPerformed(evt);
            }
        });
        mantenimiento.add(cliente);

        producto.setText("Producto");
        producto.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                productoActionPerformed(evt);
            }
        });
        mantenimiento.add(producto);

        vendedor.setText("Vendedor");
        vendedor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                vendedorActionPerformed(evt);
            }
        });
        mantenimiento.add(vendedor);

        jMenuBar1.add(mantenimiento);

        reportes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/inmigracion.png"))); // NOI18N
        reportes.setText("Reportes");

        reportesVenta.setText("Reportes de Venta");
        reportesVenta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                reportesVentaActionPerformed(evt);
            }
        });
        reportes.add(reportesVenta);

        jMenuBar1.add(reportes);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clienteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clienteActionPerformed
    {//GEN-HEADEREND:event_clienteActionPerformed
        new VtnCliente().setVisible(true);
    }//GEN-LAST:event_clienteActionPerformed

    private void reportesVentaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_reportesVentaActionPerformed
    {//GEN-HEADEREND:event_reportesVentaActionPerformed
        new ReportesVentas().setVisible(true);
    }//GEN-LAST:event_reportesVentaActionPerformed

    private void clienteMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_clienteMouseClicked
    {//GEN-HEADEREND:event_clienteMouseClicked

    }//GEN-LAST:event_clienteMouseClicked

    private void productoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_productoActionPerformed
    {//GEN-HEADEREND:event_productoActionPerformed
        new VtnProducto().setVisible(true);
    }//GEN-LAST:event_productoActionPerformed

    private void vendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_vendedorActionPerformed
    {//GEN-HEADEREND:event_vendedorActionPerformed
        new VtnVendedor().setVisible(true);
    }//GEN-LAST:event_vendedorActionPerformed

    private void generarVentaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_generarVentaActionPerformed
    {//GEN-HEADEREND:event_generarVentaActionPerformed
        new Ventana_Ventas().setVisible(true);
    }//GEN-LAST:event_generarVentaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        llenarTablaProductosTodos();
        llenarTablaVendedorTodos();
        llenarTablaClientesTodos();
    }//GEN-LAST:event_formWindowOpened

    private void aceptarProdcutosActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aceptarProdcutosActionPerformed
    {//GEN-HEADEREND:event_aceptarProdcutosActionPerformed
        if (ordenarPorPrecio.isSelected())
        {
            llenarTablaProductosOrdenados(true);
        } else
        {
            if (checkPrecioMaximo.isSelected())
            {
                llenarTablaProductoConMaximoPrecio(true);
            } else
            {
                if (checkMayor15.isSelected())
                {
                    llenarTablaProductosConFiltroALL(true);
                } else
                {
                    if (checkPrecioMinimo.isSelected())
                    {
                        llenarTablaProductoConPrecioMinimo(true);
                    } else
                    {
                        if (checkPromedioPrecios.isSelected())
                        {
                            mostrarPromedioPrecio();
                        } else
                        {
                            if (checkDesviacionEstandarProducto.isSelected())
                            {
                                mostrarDesviacionEstandarPrecio();
                            } else
                            {
                                if (checkStockMayor20.isSelected())
                                {
                                    llenarTablaProductosConStockMayorA20(true);
                                } else
                                {
                                    if (checkStock20a40.isSelected())
                                    {
                                        llenarTablaProductosConStockEntre20y40(true);
                                    } else
                                    {
                                        llenarTablaProductosTodos();
                                    }                          
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_aceptarProdcutosActionPerformed

    private void checkIdVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkIdVendedorActionPerformed
    {//GEN-HEADEREND:event_checkIdVendedorActionPerformed
        llenarTablaVendedores(checkIdVendedor.isSelected(), checkDniVendedor.isSelected(), checkNombreVendedor.isSelected(), checkTelefonoVendedor.isSelected(), checkEstadoVendedor.isSelected(), true || false);
    }//GEN-LAST:event_checkIdVendedorActionPerformed

    private void checkDniVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkDniVendedorActionPerformed
    {//GEN-HEADEREND:event_checkDniVendedorActionPerformed
        llenarTablaVendedores(checkIdVendedor.isSelected(), checkDniVendedor.isSelected(), checkNombreVendedor.isSelected(), checkTelefonoVendedor.isSelected(), checkEstadoVendedor.isSelected(), true || false);
    }//GEN-LAST:event_checkDniVendedorActionPerformed

    private void checkNombreVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkNombreVendedorActionPerformed
    {//GEN-HEADEREND:event_checkNombreVendedorActionPerformed
        llenarTablaVendedores(checkIdVendedor.isSelected(), checkDniVendedor.isSelected(), checkNombreVendedor.isSelected(), checkTelefonoVendedor.isSelected(), checkEstadoVendedor.isSelected(), true || false);
    }//GEN-LAST:event_checkNombreVendedorActionPerformed

    private void checkEstadoVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkEstadoVendedorActionPerformed
    {//GEN-HEADEREND:event_checkEstadoVendedorActionPerformed
        llenarTablaVendedores(checkIdVendedor.isSelected(), checkDniVendedor.isSelected(), checkNombreVendedor.isSelected(), checkTelefonoVendedor.isSelected(), checkEstadoVendedor.isSelected(), true || false);
    }//GEN-LAST:event_checkEstadoVendedorActionPerformed

    private void limpiarClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarClientesActionPerformed
    {//GEN-HEADEREND:event_limpiarClientesActionPerformed
        llenarTablaClientesTodos();
        CtrlInterfaz.limpia(tClientes, activos, inactivos);
        checkClientesActivos.setSelected(false);
        checkClientesInactivos.setSelected(false);
        checkIdClientes.setSelected(false);
        checkDniClientes.setSelected(false);
        checkNombreClientes.setSelected(false);
        checkDireccionClientes.setSelected(false);
        checkEstadoClientes.setSelected(false);
        checkToluca.setSelected(false);
        checkMetepec.setSelected(false);
    }//GEN-LAST:event_limpiarClientesActionPerformed

    private void aceptarClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aceptarClientesActionPerformed
    {//GEN-HEADEREND:event_aceptarClientesActionPerformed
        if (checkClientesActivos.isSelected())
        {
            mostrarNumeroDeClientes();
            llenarTablaClientesSoloActivos(true);
        } else
        {
            if (checkClientesInactivos.isSelected())
            {
                mostrarNumeroDeClientesInactivos();
                llenarTablaClientesSoloInactivos(true);
            } else
            {
                if (checkToluca.isSelected())
                {
                    llenarTablaClientesPorDireccionToluca(true);
                } else
                {
                    if (checkMetepec.isSelected())
                    {
                        llenarTablaClientesEnMetepec(true);
                    } else
                    {
                        mostrarNumeroDeClientes();
                        llenarTablaClientes(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_aceptarClientesActionPerformed

    private void checkTelefonoVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkTelefonoVendedorActionPerformed
    {//GEN-HEADEREND:event_checkTelefonoVendedorActionPerformed
        llenarTablaVendedores(checkIdVendedor.isSelected(), checkDniVendedor.isSelected(), checkNombreVendedor.isSelected(), checkTelefonoVendedor.isSelected(), checkEstadoVendedor.isSelected(), true || false);
    }//GEN-LAST:event_checkTelefonoVendedorActionPerformed

    private void limpiarVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarVendedorActionPerformed
    {//GEN-HEADEREND:event_limpiarVendedorActionPerformed
        llenarTablaVendedorTodos();
        checkIdVendedor.setSelected(false);
        checkDniVendedor.setSelected(false);
        checkNombreVendedor.setSelected(false);
        checkTelefonoVendedor.setSelected(false);
        checkEstadoVendedor.setSelected(false);
        checkVendedorActivo.setSelected(false);
        checkVendedoresInactivos.setSelected(false);
    }//GEN-LAST:event_limpiarVendedorActionPerformed

    private void limpiarProductosActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarProductosActionPerformed
    {//GEN-HEADEREND:event_limpiarProductosActionPerformed
        llenarTablaProductosTodos();
        CtrlInterfaz.limpia(promPrecios, desviacionEstandar);
        ordenarPorPrecio.setSelected(false);
        checkPrecioMaximo.setSelected(false);
        checkMayor15.setSelected(false);
        checkIdProducto.setSelected(false);
        checkNombreProducto.setSelected(false);
        checkPrecioProducto.setSelected(false);
        checkStockProducto.setSelected(false);
        checkEstadoProducto.setSelected(false);
        checkPrecioMinimo.setSelected(false);
        checkPromedioPrecios.setSelected(false);
        checkDesviacionEstandarProducto.setSelected(false);
        checkStockMayor20.setSelected(false);
        checkStock20a40.setSelected(false);
    }//GEN-LAST:event_limpiarProductosActionPerformed

    private void checkDireccionClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkDireccionClientesActionPerformed
    {//GEN-HEADEREND:event_checkDireccionClientesActionPerformed
        llenarTablaClientes(checkIdClientes.isSelected(), checkDniClientes.isSelected(), checkNombreClientes.isSelected(), checkDireccionClientes.isSelected(), checkEstadoClientes.isSelected(), true || false);    }//GEN-LAST:event_checkDireccionClientesActionPerformed

    private void checkIdClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkIdClientesActionPerformed
    {//GEN-HEADEREND:event_checkIdClientesActionPerformed
        llenarTablaClientes(checkIdClientes.isSelected(), checkDniClientes.isSelected(), checkNombreClientes.isSelected(), checkDireccionClientes.isSelected(), checkEstadoClientes.isSelected(), true || false);
    }//GEN-LAST:event_checkIdClientesActionPerformed

    private void checkDniClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkDniClientesActionPerformed
    {//GEN-HEADEREND:event_checkDniClientesActionPerformed
        llenarTablaClientes(checkIdClientes.isSelected(), checkDniClientes.isSelected(), checkNombreClientes.isSelected(), checkDireccionClientes.isSelected(), checkEstadoClientes.isSelected(), true || false);    }//GEN-LAST:event_checkDniClientesActionPerformed

    private void checkNombreClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkNombreClientesActionPerformed
    {//GEN-HEADEREND:event_checkNombreClientesActionPerformed
        llenarTablaClientes(checkIdClientes.isSelected(), checkDniClientes.isSelected(), checkNombreClientes.isSelected(), checkDireccionClientes.isSelected(), checkEstadoClientes.isSelected(), true || false);    }//GEN-LAST:event_checkNombreClientesActionPerformed

    private void checkEstadoClientesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkEstadoClientesActionPerformed
    {//GEN-HEADEREND:event_checkEstadoClientesActionPerformed
        llenarTablaClientes(checkIdClientes.isSelected(), checkDniClientes.isSelected(), checkNombreClientes.isSelected(), checkDireccionClientes.isSelected(), checkEstadoClientes.isSelected(), true || false);
    }//GEN-LAST:event_checkEstadoClientesActionPerformed

    private void checkIdProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkIdProductoActionPerformed
    {//GEN-HEADEREND:event_checkIdProductoActionPerformed
        llenarTablaProductos(checkIdProducto.isSelected(), checkNombreProducto.isSelected(), checkPrecioProducto.isSelected(), checkStockProducto.isSelected(), checkEstadoProducto.isSelected(), true || false);
    }//GEN-LAST:event_checkIdProductoActionPerformed

    private void checkNombreProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkNombreProductoActionPerformed
    {//GEN-HEADEREND:event_checkNombreProductoActionPerformed
        llenarTablaProductos(checkIdProducto.isSelected(), checkNombreProducto.isSelected(), checkPrecioProducto.isSelected(), checkStockProducto.isSelected(), checkEstadoProducto.isSelected(), true || false);
    }//GEN-LAST:event_checkNombreProductoActionPerformed

    private void checkPrecioProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkPrecioProductoActionPerformed
    {//GEN-HEADEREND:event_checkPrecioProductoActionPerformed
        llenarTablaProductos(checkIdProducto.isSelected(), checkNombreProducto.isSelected(), checkPrecioProducto.isSelected(), checkStockProducto.isSelected(), checkEstadoProducto.isSelected(), true || false);
    }//GEN-LAST:event_checkPrecioProductoActionPerformed

    private void checkStockProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkStockProductoActionPerformed
    {//GEN-HEADEREND:event_checkStockProductoActionPerformed
        llenarTablaProductos(checkIdProducto.isSelected(), checkNombreProducto.isSelected(), checkPrecioProducto.isSelected(), checkStockProducto.isSelected(), checkEstadoProducto.isSelected(), true || false);
    }//GEN-LAST:event_checkStockProductoActionPerformed

    private void checkEstadoProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkEstadoProductoActionPerformed
    {//GEN-HEADEREND:event_checkEstadoProductoActionPerformed
        llenarTablaProductos(checkIdProducto.isSelected(), checkNombreProducto.isSelected(), checkPrecioProducto.isSelected(), checkStockProducto.isSelected(), checkEstadoProducto.isSelected(), true || false);
    }//GEN-LAST:event_checkEstadoProductoActionPerformed

    private void aceptarVendedorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aceptarVendedorActionPerformed
    {//GEN-HEADEREND:event_aceptarVendedorActionPerformed
        if (checkVendedorActivo.isSelected())
        {
            llenarTablaVendedoresActivos(true);
        } else
        {
            if (checkVendedoresInactivos.isSelected())
            {
                llenarTablaVendedoresInactivos(true);
            } else
            {
            }
        }
    }//GEN-LAST:event_aceptarVendedorActionPerformed

    private void checkVendedorActivoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkVendedorActivoActionPerformed
    {//GEN-HEADEREND:event_checkVendedorActivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkVendedorActivoActionPerformed

    private void checkDesviacionEstandarProductoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkDesviacionEstandarProductoActionPerformed
    {//GEN-HEADEREND:event_checkDesviacionEstandarProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkDesviacionEstandarProductoActionPerformed
    private void llenarTablaProductosConStockEntre20y40(boolean aplicarFiltroStock)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0); 

        List<Producto> productos;
        if (aplicarFiltroStock)
        {
            productos = ProductoDao.listarProductosConStockEntre20y40();
        } else
        {
            productos = ProductoDao.listarProductos(); 
        }

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
    }

    private void llenarTablaClientesEnMetepec(boolean aplicarFiltroMetepec)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes;
        if (aplicarFiltroMetepec)
        {
            clientes = ClienteDao.listarClientesEnMetepec();
        } else
        {
            clientes = ClienteDao.listarClientes();
        }

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaProductosConStockMayorA20(boolean aplicarFiltroStock)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos;
        if (aplicarFiltroStock)
        {
            productos = ProductoDao.listarProductosConStockMayorA20();
        } else
        {
            productos = ProductoDao.listarProductos();
        }

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
    }

    private void llenarTablaClientesPorDireccionToluca(boolean aplicarFiltroToluca)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes;
        if (aplicarFiltroToluca)
        {
            clientes = ClienteDao.listarClientesPorDireccionToluca();
        } else
        {
            clientes = ClienteDao.listarClientes();
        }

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void mostrarDesviacionEstandarPrecio()
    {
        double desviacionEstandar1 = ProductoDao.obtenerDesviacionEstandarPrecioProductos();
        desviacionEstandar.setText(String.format("%.2f", desviacionEstandar1));
    }

    private void mostrarPromedioPrecio()
    {
        double promedioPrecio = ProductoDao.obtenerPromedioPrecioProductos();
        promPrecios.setText(String.format("%.2f", promedioPrecio));
    }

    private void llenarTablaProductoConPrecioMinimo(boolean mostrarMinimoPrecio)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos = new ArrayList<>();

        if (mostrarMinimoPrecio)
        {
            Producto productoMinimo = ProductoDao.obtenerProductoConPrecioMinimo();
            if (productoMinimo != null)
            {
                productos.add(productoMinimo);
            }
        } else
        {
            productos = ProductoDao.listarProductos();
        }

        tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(30);
        tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(4).setPreferredWidth(5);

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
    }

    private void llenarTablaVendedoresInactivos(boolean soloInactivos)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaVendedor.getModel();
        modelo.setRowCount(0);

        List<Vendedor> vendedores;
        if (soloInactivos)
        {
            vendedores = VendedorDao.listarVendedoresInactivos();
        } else
        {
            vendedores = VendedorDao.listarVendedores();
        }

        for (Vendedor vendedor : vendedores)
        {
            modelo.addRow(new Object[]
            {
                vendedor.getIdVendedor(),
                vendedor.getDni(),
                vendedor.getNombre(),
                vendedor.getTelefono(),
                vendedor.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaVendedoresActivos(boolean soloActivos)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaVendedor.getModel();
        modelo.setRowCount(0);

        List<Vendedor> vendedores;
        if (soloActivos)
        {
            vendedores = VendedorDao.listarVendedoresActivos();
        } else
        {
            vendedores = VendedorDao.listarVendedores();
        }

        for (Vendedor vendedor : vendedores)
        {
            modelo.addRow(new Object[]
            {
                vendedor.getIdVendedor(),
                vendedor.getDni(),
                vendedor.getNombre(),
                vendedor.getTelefono(),
                vendedor.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaProductos(boolean filtroId, boolean filtroNombre, boolean filtroPrecio, boolean filtroStock, boolean filtroEstado, Boolean estado)
    {
        tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(filtroId ? 5 : 0);
        tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(filtroNombre ? 30 : 0);
        tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(filtroPrecio ? 10 : 0);
        tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(filtroStock ? 10 : 0);
        tablaProducto.getColumnModel().getColumn(4).setPreferredWidth(filtroEstado ? 5 : 0);

        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos = ProductoDao.listarProductosPorFiltros(filtroId, filtroNombre, filtroPrecio, filtroStock, filtroEstado, estado);

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                filtroId ? producto.getIdProducto() : null,
                filtroNombre ? producto.getNombre() : null,
                filtroPrecio ? producto.getPrecio() : null,
                filtroStock ? producto.getStock() : null,
                filtroEstado ? (producto.isEstado() ? "Disponible" : "No Disponible") : null
            });
        }
    }

    private void llenarTablaVendedores(boolean filtroId, boolean filtroDni, boolean filtroNombre, boolean filtroTelefono, boolean filtroEstado, Boolean estado)
    {
        tablaVendedor.getColumnModel().getColumn(0).setPreferredWidth(filtroId ? 5 : 0);
        tablaVendedor.getColumnModel().getColumn(1).setPreferredWidth(filtroDni ? 5 : 0);
        tablaVendedor.getColumnModel().getColumn(2).setPreferredWidth(filtroNombre ? 30 : 0);
        tablaVendedor.getColumnModel().getColumn(3).setPreferredWidth(filtroTelefono ? 30 : 0);
        tablaVendedor.getColumnModel().getColumn(4).setPreferredWidth(filtroEstado ? 5 : 0);

        DefaultTableModel modelo = (DefaultTableModel) tablaVendedor.getModel();
        modelo.setRowCount(0);

        List<Vendedor> vendedores = VendedorDao.listarVendedoresPorFiltros(filtroId, filtroDni, filtroNombre, filtroTelefono, filtroEstado, estado);

        for (Vendedor vendedor : vendedores)
        {
            modelo.addRow(new Object[]
            {
                filtroId ? vendedor.getIdVendedor() : null,
                filtroDni ? vendedor.getDni() : null,
                filtroNombre ? vendedor.getNombre() : null,
                filtroTelefono ? vendedor.getTelefono() : null,
                filtroEstado ? (vendedor.isEstado() ? "Activo" : "Inactivo") : null
            });
        }
    }

    private void llenarTablaClientes(boolean filtroId, boolean filtroDni, boolean filtroNombre, boolean filtroDireccion, boolean filtroEstado, Boolean estado)
    {
        tablaCliente.getColumnModel().getColumn(0).setPreferredWidth(filtroId ? 5 : 0);
        tablaCliente.getColumnModel().getColumn(1).setPreferredWidth(filtroDni ? 5 : 0);
        tablaCliente.getColumnModel().getColumn(2).setPreferredWidth(filtroNombre ? 30 : 0);
        tablaCliente.getColumnModel().getColumn(3).setPreferredWidth(filtroDireccion ? 30 : 0);
        tablaCliente.getColumnModel().getColumn(4).setPreferredWidth(filtroEstado ? 5 : 0);

        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes = ClienteDao.listarClientesPorFiltros(filtroId, filtroDni, filtroNombre, filtroDireccion, filtroEstado, estado);

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                filtroId ? cliente.getIdCliente() : null,
                filtroDni ? cliente.getDni() : null,
                filtroNombre ? cliente.getNombres() : null,
                filtroDireccion ? cliente.getDireccion() : null,
                filtroEstado ? (cliente.isEstado() ? "Activo" : "Inactivo") : null
            });
        }
    }

    private void llenarTablaClientesSoloInactivos(boolean soloInactivos)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes;
        if (soloInactivos)
        {
            clientes = ClienteDao.listarClientesInactivos();
        } else
        {
            clientes = ClienteDao.listarClientes();
        }

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }

        if (soloInactivos)
        {
            int totalInactivos = ClienteDao.contarClientesInactivos();
            inactivos.setText(String.valueOf(totalInactivos));
        } else
        {
            inactivos.setText("");
        }
    }

    private void mostrarNumeroDeClientesInactivos()
    {
        int totalClientesInactivos = ClienteDao.contarClientesInactivos();
        int totalClientes = ClienteDao.contarClientes(false);

        tClientes.setText(String.valueOf(totalClientes));
        inactivos.setText(String.valueOf(totalClientesInactivos));
    }

    private void mostrarNumeroDeClientes()
    {
        boolean soloActivos = checkClientesActivos.isSelected();

        int totalClientes = ClienteDao.contarClientes(false);
        int totalClientesActivos = ClienteDao.contarClientes(true);

        tClientes.setText(String.valueOf(totalClientes));
        activos.setText(String.valueOf(totalClientesActivos));

        llenarTablaClientes(soloActivos);
    }

    private void llenarTablaClientes(boolean soloActivos)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes;
        if (soloActivos)
        {
            clientes = ClienteDao.listarClientesActivos();
        } else
        {
            clientes = ClienteDao.listarClientes();
        }

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaClientesSoloActivos(boolean soloActivos)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();
        modelo.setRowCount(0);

        List<Cliente> clientes;
        if (soloActivos)
        {
            clientes = ClienteDao.listarClientesActivos();
        } else
        {
            clientes = ClienteDao.listarClientes();
        }

        for (Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaProductosConFiltroALL(boolean aplicarFiltroALL)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos;

        if (aplicarFiltroALL)
        {
            productos = ProductoDao.listarProductosConPrecioMayorQueTodos(15.0);

            tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(5);
            tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(30);
            tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(10);
            tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(10);
            tablaProducto.getColumnModel().getColumn(4).setPreferredWidth(5);

            for (Producto producto : productos)
            {
                modelo.addRow(new Object[]
                {
                    producto.getIdProducto(),
                    producto.getNombre(),
                    producto.getPrecio(),
                    producto.getStock(),
                    producto.isEstado() ? "Disponible" : "No Disponible"
                });
            }
        }
    }

    private void llenarTablaProductoConMaximoPrecio(boolean mostrarMaximoPrecio)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos = new ArrayList<>();

        if (mostrarMaximoPrecio)
        {

            Producto productoMaximo = ProductoDao.obtenerProductoConPrecioMaximo();
            if (productoMaximo != null)
            {
                productos.add(productoMaximo);
            }
        } else
        {
            productos = ProductoDao.listarProductos();
        }

        tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(30);
        tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(4).setPreferredWidth(5);

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
    }

    private void llenarTablaProductosOrdenados(boolean ordenarPorPrecio)
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0);

        List<Producto> productos;
        if (ordenarPorPrecio)
        {
            System.out.println("Ordenando por precio de mayor a menor"); // Línea de depuración
            productos = ProductoDao.listarProductosOrdenadosPorPrecio();
        } else
        {
            productos = ProductoDao.listarProductos();
        }

        tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(30);
        tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(10);
        tablaProducto.getColumnModel().getColumn(4).setPreferredWidth(5);

        for (Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
        tablaProducto.repaint();
    }

    private void llenarTablaClientesTodos()
    {
        tablaCliente.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaCliente.getColumnModel().getColumn(1).setPreferredWidth(5);
        tablaCliente.getColumnModel().getColumn(2).setPreferredWidth(30);
        tablaCliente.getColumnModel().getColumn(3).setPreferredWidth(30);
        DefaultTableModel modelo = (DefaultTableModel) tablaCliente.getModel();

        modelo.setRowCount(0);

        List<modelo.Cliente> clientes = ClienteDao.listarClientes();

        for (modelo.Cliente cliente : clientes)
        {
            modelo.addRow(new Object[]
            {
                cliente.getIdCliente(),
                cliente.getDni(),
                cliente.getNombres(),
                cliente.getDireccion(),
                cliente.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaVendedorTodos()
    {
        tablaVendedor.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaVendedor.getColumnModel().getColumn(1).setPreferredWidth(5);
        tablaVendedor.getColumnModel().getColumn(2).setPreferredWidth(30);
        tablaVendedor.getColumnModel().getColumn(3).setPreferredWidth(30);
        DefaultTableModel modelo = (DefaultTableModel) tablaVendedor.getModel();
        modelo.setRowCount(0);

        List<modelo.Vendedor> vendedores = VendedorDao.listarVendedores();

        for (modelo.Vendedor vendedor : vendedores)
        {
            modelo.addRow(new Object[]
            {
                vendedor.getIdVendedor(),
                vendedor.getDni(),
                vendedor.getNombre(),
                vendedor.getTelefono(),
                vendedor.isEstado() ? "Activo" : "Inactivo"
            });
        }
    }

    private void llenarTablaProductosTodos()
    {
        tablaProducto.getColumnModel().getColumn(0).setPreferredWidth(5);
        tablaProducto.getColumnModel().getColumn(1).setPreferredWidth(5);
        tablaProducto.getColumnModel().getColumn(2).setPreferredWidth(30);
        tablaProducto.getColumnModel().getColumn(3).setPreferredWidth(30);
        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();

        modelo.setRowCount(0);

        List<modelo.Producto> productos = ProductoDao.listarProductos();

        for (modelo.Producto producto : productos)
        {
            modelo.addRow(new Object[]
            {
                producto.getIdProducto(),
                producto.getNombre(),
                producto.getPrecio(),
                producto.getStock(),
                producto.isEstado() ? "Disponible" : "No Disponible"
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarClientes;
    private javax.swing.JButton aceptarProdcutos;
    private javax.swing.JButton aceptarVendedor;
    private javax.swing.JTextArea activos;
    private javax.swing.JCheckBox checkClientesActivos;
    private javax.swing.JCheckBox checkClientesInactivos;
    private javax.swing.JCheckBox checkDesviacionEstandarProducto;
    private javax.swing.JCheckBox checkDireccionClientes;
    private javax.swing.JCheckBox checkDniClientes;
    private javax.swing.JCheckBox checkDniVendedor;
    private javax.swing.JCheckBox checkEstadoClientes;
    private javax.swing.JCheckBox checkEstadoProducto;
    private javax.swing.JCheckBox checkEstadoVendedor;
    private javax.swing.JCheckBox checkIdClientes;
    private javax.swing.JCheckBox checkIdProducto;
    private javax.swing.JCheckBox checkIdVendedor;
    private javax.swing.JCheckBox checkMayor15;
    private javax.swing.JCheckBox checkMetepec;
    private javax.swing.JCheckBox checkNombreClientes;
    private javax.swing.JCheckBox checkNombreProducto;
    private javax.swing.JCheckBox checkNombreVendedor;
    private javax.swing.JCheckBox checkPrecioMaximo;
    private javax.swing.JCheckBox checkPrecioMinimo;
    private javax.swing.JCheckBox checkPrecioProducto;
    private javax.swing.JCheckBox checkPromedioPrecios;
    private javax.swing.JCheckBox checkStock20a40;
    private javax.swing.JCheckBox checkStockMayor20;
    private javax.swing.JCheckBox checkStockProducto;
    private javax.swing.JCheckBox checkTelefonoVendedor;
    private javax.swing.JCheckBox checkToluca;
    private javax.swing.JCheckBox checkVendedorActivo;
    private javax.swing.JCheckBox checkVendedoresInactivos;
    private javax.swing.JMenuItem cliente;
    private javax.swing.JTextArea desviacionEstandar;
    private javax.swing.JMenuItem generarVenta;
    private javax.swing.JTextArea inactivos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton limpiarClientes;
    private javax.swing.JButton limpiarProductos;
    private javax.swing.JButton limpiarVendedor;
    private javax.swing.JMenu mantenimiento;
    private javax.swing.JMenu menu;
    private javax.swing.JCheckBox ordenarPorPrecio;
    private javax.swing.JPanel panel;
    private javax.swing.JMenuItem producto;
    private javax.swing.JTextArea promPrecios;
    private javax.swing.JMenu reportes;
    private javax.swing.JMenuItem reportesVenta;
    private javax.swing.JScrollPane s;
    private javax.swing.JTextArea tClientes;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTable tablaVendedor;
    private javax.swing.JMenuItem vendedor;
    private javax.swing.JMenu ventas;
    // End of variables declaration//GEN-END:variables
}
